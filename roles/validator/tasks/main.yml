---
- name: Include create user task
  ansible.builtin.include_tasks: tasks/create_user.yml
  vars:
    user_name: "{{ service_identifier }}"
    home: "{{ validator_home_dir }}"

- name: Create directories
  ansible.builtin.include_tasks: tasks/create_directories.yml
  vars:
    user: "{{ service_identifier }}"
    directories: "{{ validator_directories }}"

- name: Remove old running validator container
  ansible.builtin.shell: |
    set -o pipefail
    docker ps -q -f name=supra_{{ supra.validator.ip_address }} | xargs -r docker rm -f
  args:
    executable: /bin/bash
  register: remove_container
  changed_when: remove_container.stdout != ""
  failed_when:
    - remove_container.rc != 0
    - "'No such container' not in remove_container.stderr"

- name: Create Supra validator Docker container
  ansible.builtin.shell: >
    docker run --name "supra_{{ supra.validator.ip_address }}"
    -v {{ validator_home_dir }}:/supra/configs
    -e "SUPRA_HOME=/supra/configs"
    -e "SUPRA_LOG_DIR=/supra/configs/supra_node_logs"
    -e "SUPRA_MAX_LOG_FILE_SIZE=400000000"
    -e "SUPRA_MAX_UNCOMPRESSED_LOGS=5"
    -e "SUPRA_MAX_LOG_FILES=20"
    --net=host
    -itd {{ supra.validator.docker_image }}
  args:
    executable: /bin/bash
  register: create_container
  changed_when: create_container.rc == 0
  failed_when: create_container.rc != 0

- name: Remove existing supra validator binary
  ansible.builtin.file:
    path: "{{ validator_bin_dir }}/{{ service_identifier }}"
    state: absent

- name: Copy Supra validator binary
  ansible.builtin.shell: >
    docker cp supra_{{ supra.validator.ip_address }}:/supra/supra {{ validator_bin_dir }}/{{ service_identifier }}
  args:
    executable: /bin/bash
  register: copy_result
  changed_when: copy_result.rc == 0
  failed_when:
    - copy_result.rc != 0
    - "'No such container' in copy_result.stderr"

- name: Remove running validator container
  ansible.builtin.shell: |
    set -o pipefail
    docker ps -q -f name=supra_{{ supra.validator.ip_address }} | xargs -r docker rm -f
  args:
    executable: /bin/bash
  register: remove_container
  changed_when: remove_container.stdout != ""
  failed_when:
    - remove_container.rc != 0
    - "'No such container' not in remove_container.stderr"

- name: Copy smr_settings.toml file
  ansible.builtin.template:
    src: "{{ env }}/smr_settings.toml.j2"
    dest: "{{ validator_smr_settings_file_path }}"
    owner: "{{ service_identifier }}"
    group: "{{ service_identifier }}"
    mode: "0644"

- name: Download ca_certificate.pem
  ansible.builtin.get_url:
    url: "{{ supra.validator.ca_certificate_pem_url }}"
    dest: "{{ validator_ca_certificate_pem_file_path }}"
    owner: "{{ service_identifier }}"
    group: "{{ service_identifier }}"
    mode: "0644"

- name: Download server_supra_certificate.pem
  ansible.builtin.get_url:
    url: "{{ supra.validator.server_supra_certificate_pem_url }}"
    dest: "{{ validator_server_supra_certificate_pem_file_path }}"
    owner: "{{ service_identifier }}"
    group: "{{ service_identifier }}"
    mode: "0644"

- name: Download server_supra_key.pem
  ansible.builtin.get_url:
    url: "{{ supra.validator.server_supra_key_pem_url }}"
    dest: "{{ validator_server_supra_key_pem_file_path }}"
    owner: "{{ service_identifier }}"
    group: "{{ service_identifier }}"
    mode: "0644"

- name: Download genesis_configs.json
  ansible.builtin.get_url:
    url: "{{ supra.validator.genesis_configs_url }}"
    dest: "{{ validator_genesis_configs_json_file_path }}"
    owner: "{{ service_identifier }}"
    group: "{{ service_identifier }}"
    mode: "0644"

- name: Build supra committee
  ansible.builtin.shell: >
    {{ validator_bin_dir }}/{{ service_identifier }} genesis build-supra-committee {{ supra.validator.repo_zip_url }}
  args:
    executable: /bin/bash
  changed_when: false
  environment: "{{ validator_env }}"

- name: Refresh Repository
  ansible.builtin.shell: >
    {{ validator_bin_dir }}/{{ service_identifier }} genesis refresh-repo {{ supra.validator.repo_zip_url }}
  args:
    executable: /bin/bash
  changed_when: false
  environment: "{{ validator_env }}"

- name: Generate Genesis Blob
  ansible.builtin.shell: >
    {{ validator_bin_dir }}/{{ service_identifier }} genesis generate-genesis-blob
  args:
    executable: /bin/bash
  changed_when: false
  environment: "{{ validator_env }}"

- name: Unzip the snapshot
  ansible.builtin.unarchive:
    src: "{{ supra.validator.snapshot_url }}"
    dest: "{{ validator_config_dir }}"
    remote_src: true

- name: Copy snapshot into smr_storage
  ansible.builtin.shell: >
    cp {{ validator_config_dir }}/snapshot/snapshot_*/store/* {{ validator_smr_storage_dir }}
  args:
    executable: /bin/bash
  changed_when: false

- name: Copy supra-validator-node systemd service file
  ansible.builtin.template:
    src: "{{ env }}/supra.service.j2"
    dest: /etc/systemd/system/{{ service_identifier }}.service
    owner: root
    group: root
    mode: "0644"
  notify:
    - Reload service
    - Restart service

- name: Open supra validator node p2p port
  community.general.ufw:
    rule: allow
    port: "{{ supra.validator.ports.p2p_port }}"
    proto: tcp
    comment: Open p2p port for supra rpc
